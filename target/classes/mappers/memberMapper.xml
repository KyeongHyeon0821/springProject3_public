<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.springProject3.dao.MemberDao">

  <!-- 회원 전체 조회 -->
  <select id="getMemberList" resultType="com.spring.springProject3.vo.MemberVo">
    select *,datediff(now(), lastDate) as deleteDiff from member where (#{section}=1 and (level=1 or level=888)) or (#{section}=2 and (level=2 or level=0 or level=999)) order by idx desc;
  </select>
	<!-- 회원 개별 조회 -->
	<select id="getMemberIdxSearch" resultType="com.spring.springProject3.vo.MemberVo">
		select * from member where idx=#{idx};
	</select>
  

  <!-- 아이디 중복 체크 -->
  <select id="getMemberIdCheck" parameterType="String" resultType="com.spring.springProject3.vo.MemberVo">
    select * from member where mid = #{mid}
  </select>
  
  <!-- 닉네임 중복 체크 -->
  <select id="getMemberNickCheck" parameterType="String" resultType="com.spring.springProject3.vo.MemberVo">
    select * from member where nickName = #{nickName}
  </select>
  
  <!-- 사업자등록번호 중복 체크 -->
  <select id="getMemberBizNoCheck" parameterType="String" resultType="com.spring.springProject3.vo.MemberVo">
  	select * from member where businessNo = #{businessNo}
  </select>
  
  <!-- 닉네임과 이메일로 회원 조회 (카카오 로그인 체크용) -->
  <select id="getMemberNickNameEmailCheck" parameterType="map" resultType="com.spring.springProject3.vo.MemberVo">
    select * from member where nickName = #{nickName} AND email = #{email} LIMIT 1
  </select>
  
  <!-- 이름과 이메일로 아이디 찾기 -->
  <select id="getMemberIdByNameEmail" resultType="com.spring.springProject3.vo.MemberVo">
  	select * from member where name = #{name} and email = #{email}
  </select>
  
  <!-- 이름, 아이디, 이메일로 비밀번호 찾기 -->
  <select id="getMemberByNameMidEmail" resultType="com.spring.springProject3.vo.MemberVo">
  	select * from member where name = #{name} and mid = #{mid} and email = #{email}
  </select>
  
  
  
  <!-- 회원가입 처리 -->
  <insert id="setMemberJoinOk" parameterType="com.spring.springProject3.vo.MemberVo">
    insert into member values (default, #{vo.mid}, #{vo.pwd}, #{vo.nickName}, #{vo.name}, #{vo.gender}, #{vo.birthday}, #{vo.tel}, #{vo.address}, #{vo.email}, 'NO', #{vo.level}, #{vo.businessNo}, #{vo.userInfor})
  </insert>
  
  <!-- 카카오 회원 자동 가입 처리 -->
  <insert id="setKakaoMemberInput">
  	insert into member (mid, nickName, name, email, pwd, level) values (#{mid},#{nickName},#{nickName},#{email},#{pwd},2);
  </insert>




  
  <!-- 회원 탈퇴 처리 -->
  <update id="setMemberDeleteCheck" parameterType="String">
    update member set userDel = 'OK' where mid = #{mid}
  </update>
  
  <!-- 비밀번호 변경 처리 -->
  <update id="setMemberPwdChange" parameterType="map">
    update member set pwd = #{pwd} where mid = #{mid}
  </update>
  
  <!-- 회원 정보 수정 처리 -->
  <update id="setMemberUpdateOk" parameterType="com.spring.springProject3.vo.MemberVo">
    update member set nickName = #{vo.nickName}, name = #{vo.name}, gender = #{vo.gender}, birthday = #{vo.birthday}, tel = #{vo.tel}, address = #{vo.address}, email = #{vo.email} where mid = #{vo.mid}
  </update>
  
  <!-- 임시비밀번호 -->
  <update id="updatePassword">
  	update member set pwd = #{pwd} where mid = #{mid}
  </update>
  
  
</mapper>
